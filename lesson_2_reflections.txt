Question:
What happens when you initialize a repository? Why do you need to do it?

Answer:
The .git file is added to the directory that has been initialized to become a repository, but no commits are made.  

You need to do it so you can make it possible to make commits.

Question:
How is the staging area different from the working directory and the repository? What value do you think it offers?

Answer:
The staging area is sort of a middle ground between the working directory and the repository.  
Instead of committing files directly from the working directory to the repository,
files are put into the staging area first.  Then, the user can decide to finally commit
these files to the repository.

Question:
How can you use the staging area to make sure you have one commit per logical change?

Answer:
You can compare the differences in changes between the staging area and the current commit 
in the repository with git diff --staged to be sure you are making one commit per logical change.

Question:
What are some situations when branches would be helpful in keeping your history organized? 
How would branches help?

Answer:
Branches would be helpful when you want to make an experimental feature or 
when you want to make a test version of your site in another language.
Branches allow to easily switch between different versions of your code,
as well as combine different versions of your code if you desire.

Question:
How do the diagrams help you visualize the branch structure?

Answer:
They show you which commits can access other commits within a branch and
when commits were made in relations to commits in different branches.

Question:
What is the result of merging two branches together?
Why do we represent it in the diagram the way we do?

Answer:
The two branches are joined into one commit.  
The new commit is the HEAD of the branch that was checked out at the time of the merge.
We represent it that way because the new commit can access the previous commits of the two parent branches.

Question:
What are the pros and conts of Git's automatic merging vs. always doing merges manually?

Answer:
automatic merging
pros 
  - quickly compares two commits
  - quickly combines two commits into one

cons
  - doesn't check if there is similar code written in different places
  
manual merging
pros
  - more thorough
  
cons
  - takes longer